//vertex data //
attribute vec3 IN_position;
attribute vec2 IN_uvs;
attribute vec2 IN_light_uvs;
attribute vec3 IN_normal;
attribute vec3 IN_stv;
attribute vec3 IN_ttv;
attribute vec4 IN_rgba;
////////////////

// scene info //
uniform vec3 IN_eye_pos;
uniform vec3 IN_eye_vec;

uniform vec4 rgbcolor; //From the vertex shader
uniform float rgbmode;

uniform float time;
uniform float IN_amplitude;
uniform float IN_base;
uniform float IN_deformtype;
uniform float IN_deformationSpread;
uniform float IN_phase;
uniform float IN_frequency;



////////////////

// Passed to pixel shader //
varying vec2 uv;
varying vec2 light_uv;
varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;

varying vec3 eye_to_world;
varying vec4 rgba;

////////////////////////////
vec3 DeformVertexes(float Type,vec3 xyz,vec3 normal);

void main() 
{
	vec4 pos;
	pos.xyz = IN_position;
	pos.w   = 1.0;

	pos.xyz=DeformVertexes(IN_deformtype,pos.xyz,IN_normal);

	gl_Position =  gl_ModelViewProjectionMatrix * pos;
    gl_ClipVertex =  gl_ModelViewMatrix * pos;

	
	eye_to_world =   pos.xyz -IN_eye_pos ;
	
	uv = IN_uvs; 
	light_uv = IN_light_uvs; 

	//tangent2world
	i_tangent_0 =  IN_stv;
	i_tangent_1 =  IN_ttv;
	i_tangent_2 =  IN_normal;

	//vertex shader partial emulation
	rgba=	IN_rgba;

	if (rgbmode==0.0)	  //Use the passed in rgb
	{
	    rgba.xyz= rgbcolor.xyz;
	}
    else
    if (rgbmode==2.0) //1.0-minus input color
    {
        rgba.xyz=1.0-IN_rgba.xyz;
	}

}

const float  Deg2Rad = 0.0174532925 ;

float FunctionTable(float Type, float frac)
{
	if (Type==1.0) //sin table
	{
		return sin(  frac * 360.0 * Deg2Rad );
	}
	else if (Type==2.0) //square table
	{
		if (frac<0.5) return 1.0;
		return -1.0;
	}
	else  if (Type==3.0)  //sawtooth table
	{	return frac;
	}
	else if (Type==4.0)  //inverse sawtooth table
	{
		return 1.0-frac;
	}
	else
	{	//Triangle wave (two triangles peaking at 0.25 and 0.75

		frac=frac*0.5;
		if (frac<0.25) return frac * 4.0;
		return 1.0- (frac * 4.0);
	}

}

//Wrap a float between 0..1
//Gross, but I cant think of a better way to do this 
float Wrap( float Input)
{
	float x=floor(Input);
	if (x<0.0) x+=1.0;
	return Input-x;
}

vec3 DeformVertexes(float Type,vec3 xyz,vec3 normal)
{
	if (Type==0.0) return xyz; //no change
	
	float off = ( xyz.x + xyz.y + xyz.z ) * IN_deformationSpread;
	 
	float x = Wrap( ((IN_phase+off) + time) * IN_frequency );
	float scale=  ((IN_base + FunctionTable(Type,x )) * IN_amplitude);
	
	xyz +=  normal*scale;
	return xyz;
}