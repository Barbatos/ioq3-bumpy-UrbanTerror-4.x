uniform sampler2D diffuseMap;
uniform sampler2D lightMap_0 ;
uniform sampler2D lightMap_1 ;
uniform sampler2D lightMap_2 ;
uniform sampler2D normalMap  ;
uniform samplerCube cubeMap;
uniform float fovplane;
uniform float fovbias;
uniform float specularpower;
uniform float specularscale;

uniform vec3 IN_eye_vec;

varying vec2 uv;
varying vec2 light_uv;
varying mat3 i_tangent;
varying vec3 eye_to_world;
varying vec4 position;

//basis vectors.. these are our 3 sample directions in tangent space
const vec3 basis_0=vec3( 0.816497,         0, 0.577350);
const vec3 basis_1=vec3(-0.408248, -0.707107, 0.577350);
const vec3 basis_2=vec3(-0.408248,  0.707107, 0.577350);





vec3 CalcReflectionVector( vec3 normal, vec3 eyeVec )
{
	return ( 2.0 * ( dot( normal, eyeVec )) * normal) - ( dot( normal, normal ) * eyeVec);
}

float Fresnel( vec3 normal, vec3 eye )
{
	float fresnel = (1.0+ ( - dot(normal, eye )))*0.5 ;
	return pow( fresnel, 5.0 ) ;  //5.0 is the const for water, btw
	//return 1.0;
}

void main()
{
	vec4	normtex = texture2D(normalMap, uv);
	if (normtex.w<0.5) 
	{
		discard;

	}
	
	//Normal, also conveniently in tangent space (-1 to -1)
	vec3	normal =  normtex.xyz; // no need to normalize this unless magnifying HEAPS
	normal = (normal -0.5) * 2.0;  //expand
	
	vec3  worldspace_normal = normalize( normal * i_tangent );
	
	//cubemap lookup
	vec3  reflect = CalcReflectionVector ( worldspace_normal ,eye_to_world );
	vec4  cube	  = textureCube( cubeMap , reflect );

	//diffuse lookup
	vec4  diffuse = texture2D ( diffuseMap , uv);	
	
	
	//Calculate specular
	//float fresnel = Fresnel ( worldspace_normal,IN_eye_vec ); //screw fresnel, looks better on water
	vec3  specular;
	specular = cube.xyz * pow(cube.w * specularscale, specularpower) * (1.0 -  diffuse.w ) ;
	
	
	//Calculate light
	vec3  lm0 = texture2D ( lightMap_0 , light_uv).xyz;
	vec3  lm1 = texture2D ( lightMap_1 , light_uv).xyz;
	vec3  lm2 = texture2D ( lightMap_2 , light_uv).xyz;
	
	vec3  light =  ( clamp( dot(normal,basis_0) , 0.0, 1.0) * lm0 )+   
				   ( clamp( dot(normal,basis_1) , 0.0, 1.0) * lm1 )+
				   ( clamp( dot(normal,basis_2) , 0.0, 1.0) * lm2 ) ;
		
		
		
	//Write output
    gl_FragColor.xyz =  (light* diffuse.xyz)+specular;
//	gl_FragColor.xyz =  (worldspace_normal*0.5)+0.5;
	
	//Encode the Z position into image alpha
	float g = (1.0-  position.z / fovplane); //2048 is our blur far plane
	g+=fovbias;
	gl_FragColor.w = g;
	
	
}