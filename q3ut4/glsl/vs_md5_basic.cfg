//vertex data //
attribute vec3 IN_position;
attribute vec2 IN_uvs;

attribute vec3 IN_stv;
attribute vec3 IN_ttv;
attribute vec4 IN_rgba;
attribute vec3 IN_boneindexs;
attribute vec3 IN_boneweights;
attribute vec3 IN_pos0;
attribute vec3 IN_pos1;
attribute vec3 IN_pos2;
attribute vec3 IN_norm0;
attribute vec3 IN_norm1;
attribute vec3 IN_norm2;
attribute vec3 IN_tangent0;
attribute vec3 IN_tangent1;
attribute vec3 IN_tangent2;

attribute vec3 IN_bitangent0;
attribute vec3 IN_bitangent1;
attribute vec3 IN_bitangent2;
////////////////

// scene info //
uniform vec3 IN_eye_pos;
uniform vec3 IN_eye_vec;
////////////////

// Passed to pixel shader //
varying vec2 uv;
varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;

varying vec3 eye_to_world;
varying vec4 rgba;

varying vec3 i_pixelpos;

////////////////////////////

//Vertex shader malarky for bones

uniform float IN_BoneLut[128];
uniform float IN_BonePos[16*3];
uniform float IN_BoneRot[16*4];

uniform int IN_BoneCount;
uniform float IN_InvModelMatrix[12];
//////



vec4 QuatMultiply(vec4 A, vec4 B)
{
	vec4 result;
	result[3] = (A[3]*B[3]) - (A[0]*B[0]) - (A[1]*B[1]) - (A[2]*B[2]);
	result[0] = (A[3]*B[0]) + (A[0]*B[3]) + (A[1]*B[2]) - (A[2]*B[1]);
	result[1] = (A[3]*B[1]) + (A[1]*B[3]) + (A[2]*B[0]) - (A[0]*B[2]);
	result[2] = (A[3]*B[2]) + (A[2]*B[3]) + (A[0]*B[1]) - (A[1]*B[0]);
	return result;
}
 
vec4 QuatNormalize(vec4 Q)
{
	float d= sqrt( Q[0]*Q[0]+Q[1]*Q[1]+Q[2]*Q[2]+Q[3]*Q[3]);
	if (d==0.0) return Q;
	Q[0]/=d;
	Q[1]/=d;
	Q[2]/=d;
	Q[3]/=d;
	return Q;
}

vec4 QuatInverse(vec4 quat)
{
    vec4 Inverse;
    Inverse[0] = -quat[0];
    Inverse[1] = -quat[1];
    Inverse[2] = -quat[2];
    Inverse[3] = quat[3];
    return Inverse;
}

vec3 QuatRotateVertex(vec4 quat, vec3 vec)
{
	vec4 output;
    vec4 temp, Inverse;
    vec3 finalout;
    
    Inverse[0] = -quat[0];
    Inverse[1] = -quat[1];
    Inverse[2] = -quat[2];
    Inverse[3] = quat[3];
    
	Inverse=QuatNormalize(Inverse);
	
    temp[3] = -(quat[0] * vec[0]) - (quat[1] * vec[1]) - (quat[2] * vec[2]);
    temp[0]=  (quat[3] * vec[0]) + (quat[1] * vec[2]) - (quat[2] * vec[1]);
    temp[1] = (quat[3] * vec[1]) + (quat[2] * vec[0]) - (quat[0] * vec[2]);
    temp[2] = (quat[3] * vec[2]) + (quat[0] * vec[1]) - (quat[1] * vec[0]);
    
	output=QuatMultiply(temp,Inverse);
	
	finalout[0]=output[0];
	finalout[1]=output[1];
	finalout[2]=output[2];
	return finalout;
}


void main() 
{
	
	//gl_Position = ftransform();
	//return;
	
	
	
	//Do it properly now
	vec4 WeightedVertex ;
	vec3 WeightedNormal;
	vec3 WeightedTangent;
	vec3 WeightedBitangent;
	
	vec3 wvert;
	vec3 wnorm;
	vec3 wtan;
	vec3 wbitan;

	vec3 pos;
	vec4 rot;
	
	
	
    // Go through all of the vertices weights to calculate final vertex position
    WeightedVertex.x=0.0;
    WeightedVertex.y=0.0;
    WeightedVertex.z=0.0;
    
    WeightedNormal.x=0.0;
    WeightedNormal.y=0.0;
    WeightedNormal.z=0.0;
    WeightedTangent.x=0.0;
    WeightedTangent.y=0.0;
    WeightedTangent.z=0.0;
    WeightedBitangent.x=0.0;
    WeightedBitangent.y=0.0;
    WeightedBitangent.z=0.0;
    
    for(int r = 0;r < 3; r++)
    {
		if (IN_boneweights[r]>0.0)
		{
			int index;
			
			index= int(IN_BoneLut[ int(IN_boneindexs[r]) ]);
			
			//bonepos = translation from bone space to world space
			pos[0]=IN_BonePos[(index*3)+0];
			pos[1]=IN_BonePos[(index*3)+1];
			pos[2]=IN_BonePos[(index*3)+2];
			
			//bonerot = translation from bone space to world space
			rot[0]=IN_BoneRot[(index*4)+0];
			rot[1]=IN_BoneRot[(index*4)+1];
			rot[2]=IN_BoneRot[(index*4)+2];
			rot[3]=IN_BoneRot[(index*4)+3];
			

			if (r==0) 
			{
				wvert = QuatRotateVertex(rot, IN_pos0);
				wnorm = QuatRotateVertex(rot, IN_norm0);
				wtan = QuatRotateVertex(rot,   IN_tangent0);
				wbitan = QuatRotateVertex(rot, IN_bitangent0);
			}
			if (r==1) 
			{	
				wvert = QuatRotateVertex(rot, IN_pos1);
				wnorm = QuatRotateVertex(rot, IN_norm1);
				wtan = QuatRotateVertex(rot, IN_tangent1);
				wbitan = QuatRotateVertex(rot, IN_bitangent1);
			}
			
			if (r==2) 
			{
				wvert = QuatRotateVertex(rot, IN_pos2);
				wnorm = QuatRotateVertex(rot, IN_norm2);
				wtan = QuatRotateVertex(rot, IN_tangent2);
				wbitan = QuatRotateVertex(rot, IN_bitangent2);
			}
			
			WeightedVertex.xyz+=(pos+wvert) * IN_boneweights[r];
			WeightedNormal.xyz+= wnorm  * IN_boneweights[r];
			WeightedTangent.xyz+= wtan  * IN_boneweights[r];
			WeightedBitangent.xyz+= wbitan  * IN_boneweights[r];
		}
	}


	WeightedVertex.w=1.0;

	gl_Position= gl_ProjectionMatrix * gl_ModelViewMatrix * WeightedVertex;


	
//	mat3 mat=mat3( gl_ModelViewMatrix[0][0],gl_ModelViewMatrix[1][0],gl_ModelViewMatrix[2][0],
//	 	 	       gl_ModelViewMatrix[0][1],gl_ModelViewMatrix[1][1],gl_ModelViewMatrix[2][1],
//			       gl_ModelViewMatrix[0][2],gl_ModelViewMatrix[1][2],gl_ModelViewMatrix[2][2]);
			   
	mat3 mat=mat3( IN_InvModelMatrix[0],IN_InvModelMatrix[3],IN_InvModelMatrix[6],
				   IN_InvModelMatrix[1],IN_InvModelMatrix[4],IN_InvModelMatrix[7],
				   IN_InvModelMatrix[2],IN_InvModelMatrix[5],IN_InvModelMatrix[8]);		
				   
			   	   
			   
//	mat4 worldmat=mat4( IN_InvModelMatrix[0],IN_InvModelMatrix[3],IN_InvModelMatrix[6],0,
//	       	            IN_InvModelMatrix[1],IN_InvModelMatrix[4],IN_InvModelMatrix[7],0,
//	       				IN_InvModelMatrix[2],IN_InvModelMatrix[5],IN_InvModelMatrix[8],0,
//						IN_InvModelMatrix[9],IN_InvModelMatrix[10],IN_InvModelMatrix[11],1	);					   
	mat4 worldmat=mat4( IN_InvModelMatrix[0],IN_InvModelMatrix[1],IN_InvModelMatrix[2],0,
	       	            IN_InvModelMatrix[3],IN_InvModelMatrix[4],IN_InvModelMatrix[5],0,
		       			IN_InvModelMatrix[6],IN_InvModelMatrix[7],IN_InvModelMatrix[8],0,
						IN_InvModelMatrix[9],IN_InvModelMatrix[10],IN_InvModelMatrix[11],1	);							
						
			   
	i_pixelpos   =( worldmat* WeightedVertex ).xyz;
			   
		
	i_tangent_0 = normalize( WeightedTangent * mat);
	i_tangent_1 = normalize( WeightedBitangent * mat);
	i_tangent_2 = normalize( WeightedNormal * mat);
	
	
	uv= IN_uvs;
}