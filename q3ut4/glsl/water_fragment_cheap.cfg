uniform sampler2D diffuseMap;
uniform sampler2D lightMap_0;
uniform sampler2D lightMap_1;
uniform sampler2D lightMap_2;
uniform sampler2D normalMap;
uniform samplerCube cubeMap;

uniform float time;
uniform float flip;
uniform vec3 tint;

uniform vec3 IN_eye_vec;

varying vec2 uv;
varying vec2 uv2;
varying vec2 light_uv;

varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;

varying vec3 eye_to_world;
varying vec3 project;

//basis vectors.. these are our 3 sample directions in tangent space
const vec3 basis_0=vec3( 0.816497,         0, 0.577350);
const vec3 basis_1=vec3(-0.408248, -0.707107, 0.577350);
const vec3 basis_2=vec3(-0.408248,  0.707107, 0.577350);

const vec3 up=vec3(0.0, 0.0, 1.0);

const vec3 black=vec3(0.0, 0.0, 0.0);


vec3 CalcReflectionVector( vec3 normal, vec3 eyeVec )
{
	return ( 2.0 * ( dot( normal, eyeVec )) * normal) - ( dot( normal, normal ) * eyeVec);
}

float Fresnel( vec3 eyeVec, vec3 normal, float scale )
{
	float fresnel =  clamp( -dot(eyeVec, normal ),0.0, 1.0);
	return 1.0-clamp(pow(fresnel,scale),0.0,1.0);  //5.0 is the const for water, btw 
}

void main()
{

	vec3	normal =  ( texture2D(normalMap, uv).xyz );
	vec3    normal2 = ( texture2D(normalMap, uv2 ).xyz);

	normal = (normal - 0.5) * 2.0;  //expand
	normal2 = (normal2 - 0.5) * 2.0;  //expand

	normal= ( normal + normal2 )*0.5;

	vec3  worldspace_normal =  normal*flip; //faster path for pure x/y plane water
	vec3  eye2world = normalize(eye_to_world);

	vec3 ref = CalcReflectionVector(worldspace_normal,eye2world);
	vec4 reflect = textureCube( cubeMap, ref );

	//Calculate fresnel style blend giving us transparency at steep angles
	float fres =   -dot( eye2world,worldspace_normal);
	fres = clamp( fres,0.0,1.0); 
	fres *=0.5;

	//vec3 final = reflect.xyz;//mix(   tint,reflect.xyz,fres);
	vec3 final = reflect.xyz*tint;

	gl_FragColor.xyz=final;

	gl_FragColor.w =1.0-fres;


	
}



