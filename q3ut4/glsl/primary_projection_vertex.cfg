//vertex data //
attribute vec3 IN_position;
attribute vec2 IN_uvs;
attribute vec2 IN_light_uvs;
attribute vec3 IN_normal;
attribute vec3 IN_stv;
attribute vec3 IN_ttv;
////////////////

// scene info //
uniform vec3 IN_eye_pos;
uniform vec3 IN_eye_vec;
uniform mat4 projection;
////////////////

// Passed to pixel shader //
varying vec2 uv;
varying vec2 light_uv;
varying mat3 i_tangent;
varying vec3 eye_to_world;
varying vec3 tex_project;
////////////////////////////

void main() 
{
	vec4 pos;
	pos.xyz = IN_position;
	pos.w   = 1;
	
	eye_to_world = pos.xyz - IN_eye_pos;
	
	uv = IN_uvs; 
	light_uv = IN_light_uvs; 
	
//	i_tangent =  mat3(IN_stv.x,IN_stv.y,IN_stv.z, 
//					  IN_ttv.x,IN_ttv.y,IN_ttv.z, 
//					  IN_normal.x,IN_normal.y,IN_normal.z);

	//Inverse Tangent = Transpose 3x3 rotation
	i_tangent =  mat3(IN_stv.x   ,IN_ttv.x   ,IN_normal.x, 
					  IN_stv.y   ,IN_ttv.y   ,IN_normal.y, 
					  IN_stv.z   ,IN_ttv.z   ,IN_normal.z);

	gl_Position = gl_ModelViewProjectionMatrix * pos;

	tex_project = projection * pos;
}

{
   // transform vertex position by combined view projection matrix
   outPos = mul(Mvp, inPos);
   // transform vertex position by projective texture matrix and
   // copy the result into homogeneous texture coordinate set 0
   outTexProj = mul(Mprojtex, inPos);
}

