uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform samplerCube cubeMap;

uniform vec3 IN_eye_vec;
uniform vec3 IN_eye_pos;

varying vec2 uv;
varying vec4 rgba;
varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;
varying vec3 eye_to_world;

	

//basis vectors.. these are our 3 sample directions in tangent space
//const vec3 basis_0=vec3( 0.816497,         0, 0.577350);
//const vec3 basis_1=vec3(-0.408248, -0.707107, 0.577350);
//const vec3 basis_2=vec3(-0.408248,  0.707107, 0.577350);
const vec3 basis_0=vec3( 1.0,         0, 0);
const vec3 basis_1=vec3(-0.5, -0.86, 0);
const vec3 basis_2=vec3(-0.5,  0.86, 0);


const vec3 up=vec3( 0,         0, 1.0 );


const float specboost =2.5; //how "overbright" to let the spec go
const float specpow =3.0; 

vec3 CalcReflectionVector( vec3 eyeVec, vec3 normal )
{
	return reflect(eyeVec,normal);
}


//Fresnel term with booster
//the higher the "scale" the smaller the dead zone is
//its pronounced frenel. who knew?
float Fresnel( vec3 eyeVec, vec3 normal, float scale )
{
	float fresnel =  clamp( -dot(eyeVec, normal ),0.0, 1.0);
	return 1.0-clamp(pow(fresnel,scale),0.0,1.0);  //5.0 is the const for water, btw 
}

void main()
{
	
	//diffuse lookup
	vec4  diffuse = texture2D ( diffuseMap , uv);	
	vec4  norm = texture2D ( normalMap , uv);	

	
	vec3	normal =  norm.xyz; 
	normal = (normal -0.5) * 2.0;  //expand

	//radbump
	vec3  scalednormal = normal ;
	vec3  light =  rgba.xyz;


	//Nvidia bug: Passing in a variant mat3 doesn't work for this, so I pass in all 3 rows/colums as their own variants	
	mat3  ident = mat3(i_tangent_0.x ,i_tangent_1.x ,i_tangent_2.x ,
			   i_tangent_0.y ,i_tangent_1.y ,i_tangent_2.y , 
			   i_tangent_0.z ,i_tangent_1.z ,i_tangent_2.z ); 
	
	vec3  worldspace_normal = normalize(  normal*ident);

	vec3  reflect = CalcReflectionVector ( eye_to_world,worldspace_normal );

	//cubemap lookup for specular
	vec4  cube	  = textureCube( cubeMap , reflect );
	
	
	//Fresnel.. if you're into that sort of thing 
	vec3	eye2world = normalize(eye_to_world); 
	float fresnel = Fresnel ( eye2world,worldspace_normal , 3.0 );  
	
	//Calculate specular
	//vec3  specular = norm.w*cube.xyz*fresnel;
	vec3  specular = (pow( norm.w*fresnel,specpow)  *cube.xyz)*specboost;
		
	gl_FragColor.xyz = (light.xyz * diffuse.xyz)+specular;
	
	gl_FragColor.w = diffuse.w;
	
	
}



