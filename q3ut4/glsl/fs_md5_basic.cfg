uniform sampler2D diffuseMap;

uniform vec3 tint;

varying vec2 uv;
varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;
varying vec3 i_pixelpos;

uniform vec3 g_lightdir;
uniform vec3 g_dirlightcolor;
uniform vec3 g_ambientcolor;
uniform vec3 g_speccolor;

uniform vec3 IN_eye_pos;
uniform vec3 IN_eye_vec;


float g_RimBias =0.4f;;
float g_RimSquish=2.0f;

void main()
{
	
	vec4  diffuse = texture2D ( diffuseMap , uv);	
	
	//gl_FragColor.xyz =  tint;//diffuse.xyz;
	vec3 normal = {0,0,1};
	normal.x=diffuse.x*0.0001;
	normal.y=diffuse.y*0.0001;
	
	mat3  ident = mat3(i_tangent_0.x ,i_tangent_1.x ,i_tangent_2.x ,
					   i_tangent_0.y ,i_tangent_1.y ,i_tangent_2.y , 
					   i_tangent_0.z ,i_tangent_1.z ,i_tangent_2.z ); 
	
	
		
	vec3  worldspace_normal = normalize(  normal*ident);
	
	
	float light = dot( worldspace_normal, g_lightdir);
	light=saturate(light);
	// work out final specular reflection value.
	vec3 ReflectionVec = normalize(reflect(-g_lightdir,worldspace_normal)); // reflect
	vec3 DirToCamera = normalize(IN_eye_pos - i_pixelpos);
	float ReflectVal = dot(ReflectionVec,DirToCamera);	
	float Spec =  g_speccolor*pow(saturate(ReflectVal), 22.0 );

	float Rim = 1.0 - saturate(-dot(IN_eye_vec,worldspace_normal * g_RimSquish));
	Rim *= g_RimBias;


	float light2 = dot( worldspace_normal, -IN_eye_vec);
	light2=saturate(light2)*0.5;

	
	gl_FragColor.xyz= (g_dirlightcolor * light)+light2+Spec+Rim;
	
	//gl_FragColor.xyz=(worldspace_normal*0.5)+0.5;
	//gl_FragColor.xyz=i_pixelpos;
	
	gl_FragColor.w = 1.0;
}


