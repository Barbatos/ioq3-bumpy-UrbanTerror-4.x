uniform sampler2D diffuseMap;
uniform sampler2D lightMap_0;
uniform sampler2D lightMap_1;
uniform sampler2D lightMap_2;
uniform sampler2D specMap;
uniform sampler2D lightmap;

uniform sampler2D normalMap;
uniform samplerCube cubeMap;
uniform sampler2D bumpmap;

uniform vec3 IN_eye_vec;
uniform vec3 IN_eye_pos;

varying vec2 uv;
varying vec2 light_uv;
varying vec3 i_tangent_0;
varying vec3 i_tangent_1;
varying vec3 i_tangent_2;
varying vec3 eye_to_world;
varying vec3 eyeTangent;

	

//basis vectors.. these are our 3 sample directions in tangent space
//const vec3 basis_0=vec3( 0.816497,         0, 0.577350);
//const vec3 basis_1=vec3(-0.408248, -0.707107, 0.577350);
//const vec3 basis_2=vec3(-0.408248,  0.707107, 0.577350);
const vec3 basis_0=vec3( 1.0,         0, 0);
const vec3 basis_1=vec3(-0.5, -0.86, 0);
const vec3 basis_2=vec3(-0.5,  0.86, 0);

const vec3 up=vec3( 0,         0, 1.0 );


const float specboost =2.5; //how "overbright" to let the spec go
const float specpow =3.0; 

vec3 CalcReflectionVector( vec3 eyeVec, vec3 normal )
{
	return reflect(eyeVec,normal);
}


//Fresnel term with booster
//the higher the "scale" the smaller the dead zone is
//its pronounced frenel. who knew?
float Fresnel( vec3 eyeVec, vec3 normal, float scale )
{
	float fresnel =  clamp( -dot(eyeVec, normal ),0.0, 1.0);
	return 1.0-clamp(pow(fresnel,scale),0.0,1.0);  //5.0 is the const for water, btw 
}


vec2 ParallaxTexCoord(vec2 oldcoord, vec3 eye_vect, float parallax_amount)
{
   return ((1.0-texture2D(bumpmap, oldcoord).xy) * parallax_amount - parallax_amount * 0.5)* eye_vect.xy + oldcoord;
}


void main()
{
	vec3 eyeT = normalize(eyeTangent);

	//Offset mapping
    vec2 uvp =ParallaxTexCoord(uv,eyeT, 0.03);

	//diffuse lookup
	vec4  diffuse = texture2D ( diffuseMap , uvp);	
	vec4  norm = texture2D ( normalMap , uvp);	
	
	//Bug: the lighting will be coming from the wrong place.. by a little bit
	vec4  light0 = texture2D ( lightMap_0 , light_uv);	
	vec4  light1 = texture2D ( lightMap_1 , light_uv);	
	vec4  light2 = texture2D ( lightMap_2 , light_uv);	
	vec4  specsample = texture2D ( specMap, light_uv );
	vec4  lightmaptex = texture2D ( lightmap , light_uv);	
	
	
	vec3	normal =  norm.xyz; 
	normal = (normal -0.5) * 2.0;  //expand

	vec3   LightDir = specsample.xyz;
	LightDir = (LightDir -0.5) * 2.0;  //expand

	//radbump
	vec3  scalednormal = normal ;
	vec3  light = light0.xyz   * max(0.0,dot( basis_0, scalednormal ))+
				  light1.xyz   * max(0.0,dot( basis_1, scalednormal ))+
				  light2.xyz   * max(0.0,dot( basis_2, scalednormal ))+
				  lightmaptex.xyz * max(0.0,dot( up,      scalednormal ));
	//light *= rgba.xyz;


	//Nvidia bug: Passing in a variant mat3 doesn't work for this, so I pass in all 3 rows/colums as their own variants	
	mat3  ident = mat3(i_tangent_0.x ,i_tangent_1.x ,i_tangent_2.x ,
					   i_tangent_0.y ,i_tangent_1.y ,i_tangent_2.y , 
					   i_tangent_0.z ,i_tangent_1.z ,i_tangent_2.z ); 
	
	vec3  worldspace_normal = normalize(  normal*ident);

	vec3	eye2world = normalize(eye_to_world ); 
	vec3  reflect = CalcReflectionVector ( eye2world,worldspace_normal );
	
	//cubemap lookup for specular
	vec4  cube	  = textureCube( cubeMap , reflect );
	
	
	//Fresnel.. if you're into that sort of thing 
	float fresnel = Fresnel ( eye2world,worldspace_normal , 3.0 );  
	
	//Calculate cube specular
	//vec3  specular = norm.w*cube.xyz*fresnel;
	vec3  specular = (pow( norm.w*fresnel,specpow)  *cube.xyz)*specboost;
		
	//calculate New Specular
	// work out final specular reflection value.

	
	vec3 ReflectionVec = normalize( CalcReflectionVector(LightDir,worldspace_normal)); // reflect
	float ReflectVal = dot(ReflectionVec,eye2world);	
	vec3 NewSpec =  pow(clamp(ReflectVal,0.0,1.0),  22.0  )*light*(norm.w*2.0 );		
	
		
	gl_FragColor.xyz = (light.xyz * diffuse.xyz)+specular+NewSpec;
	
	//Various debug outputs
	//gl_FragColor.xyz =  light.xyz; //lightmap
	//if (cube.w>0) gl_FragColor.xyz =  cube.xyz;
	//gl_FragColor.xyz =  (worldspace_normal*0.5)+0.5;
	//gl_FragColor.xyz =  (eyeTangent*0.5)+0.5;
	
	//gl_FragColor.xyz =  norm.xyz;
	//gl_FragColor.xyz =  (light.xyz * diffuse.xyz);
	//gl_FragColor.xyz =  (i_tangent_2*0.5)+0.5;
	//gl_FragColor.xyz =  worldnorm;
	//////////////////////

		gl_FragColor.w = diffuse.w;
	
	
}



